@using Blazored.SessionStorage
@using PeakyFlow.Aspire.Web.Components.Pages.Starter
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject ISessionStorageService SessionStorage
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject LobbyRpcService.LobbyRpcServiceClient rpc

<RadzenComponents @rendermode="InteractiveServer" />
<header class="starter">
    <div class="starter-overlay"></div>
    <div class="starter-content">
        <h1 class="name-app">Peaky Flow</h1>
        <p class="tagline">Learn to manage money the fun way.</p>
        <div class="starter-img"></div>
        <RadzenButton Size="ButtonSize.Large"
                      Text="Start Playing"
                      ButtonStyle="ButtonStyle.Primary"
                      class="btn-play"
                      Click="ScrollPage" />
        <div class="scroll-indicator" @onclick="ScrollPage">
            <i class="material-icons">expand_more</i>
        </div>
    </div>
</header>
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                <RadzenLabel Text="Peaky Flow"/>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home"
								 Icon="home"
								 Click=@(() => NavigationManager.NavigateTo("/"))/>
            <RadzenPanelMenuItem Text="Users" Icon="account_box" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="page">
            <main>
                @Body
            </main>
        </div>
        <div id="blazor-error-ui">
            An unhandled error has occurred.
            <a href="" class="reload">Reload</a>
            <a class="dismiss">ðŸ—™</a>
        </div>
    </RadzenBody>
</RadzenLayout>




@code {
    bool sidebar1Expanded = true;

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (!isFirstRender)
        {
            return;
        }
        //TODO: remove this line
        // await SessionStorage.SetItemAsStringAsync("lobbyPlayerName", "gamer");
        // await rpc.CreateLobbyAsync(new CreateLobbyMessage()
        // {
        //     Name = "TestGame",
        //     Owner = "gamer",
        //     TeamSize = 4
        // });

        var name = await SessionStorage.GetItemAsStringAsync("lobbyPlayerName");
        
        if (string.IsNullOrEmpty(name))
        {
            var dialogResult = await DialogService.OpenAsync<WhatIsYourNamePopupPage>("Welcome");
            if (dialogResult?.NameCreated ?? false)
            {
                await SessionStorage.SetItemAsStringAsync("lobbyPlayerName", dialogResult.Name);
            }
        }

        await JS.InvokeVoidAsync("scrollYByVh");
    }

    private async Task ScrollPage()
    {
        await JS.InvokeVoidAsync("scrollYByVh");
    }
}
