@page "/MyLobby"
@implements IDisposable
@using Grpc.Core
@using PeakyFlow.Aspire.Web.Components.Services
@inject CreateLobbyAndStartGameService CreateLobbyService
@inject NavigationManager NavigationManager
@inject ILogger<LobbyOwnerPage> Logger

<h3>LobbyOwnerPage</h3>

@if (Lobby != null)
{
	<div>Owner: @Owner</div>
	<h2>Players</h2>
	<small>Id: @Lobby.Id</small>
	<ul>
		@foreach(var player in Lobby.Players)
		{
			<li>@player.Name @(player.IsReady ? "Is ready": "Not ready")</li>
		}
	</ul>
	
}
else {
	<div>Loading...</div>
}

@code {
	public LobbyMsg? Lobby { get; set; }
	public string? Owner => Lobby?.Players.FirstOrDefault(x => x.IsOwner)?.Name;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (!firstRender)
		{
			return;
		}

		try
		{
			await CreateLobbyService.OnInit();
			CreateLobbyService.SubscribeOnLobbyEvents();
			Lobby = CreateLobbyService.CreatedLobby;
			StateHasChanged();
			CreateLobbyService.OnLobbyEvent += OnLobbyEvent;
		}
		catch (Exception e)
		{
			Logger.LogError(e, "Failed to init");
			var query = $"?message={Uri.EscapeDataString(e.Message)}";

			NavigationManager.NavigateTo($"/FallbackPage/{query}");
		}
	}

	private async void OnLobbyEvent(LobbyEvent eventN)
	{
		switch (eventN.ReasonCase)
		{
			case LobbyEvent.ReasonOneofCase.PlayerJoined:
				OnPlayerJoined(eventN.PlayerJoined);
				break;
			case LobbyEvent.ReasonOneofCase.PlayerLeftId:
				OnPlayerLeft(eventN.PlayerLeftId);
				break;
			case LobbyEvent.ReasonOneofCase.PlayerIsNotReadyId:
				SetPlayerIsReady(eventN.PlayerIsNotReadyId, false);
				break;
			case LobbyEvent.ReasonOneofCase.PlayerIsReadyId:
				SetPlayerIsReady(eventN.PlayerIsReadyId, true);
				break;
			default:
				return;
		}

		await InvokeAsync(StateHasChanged);
	}

	private void OnPlayerJoined(PlayerJoinedToLobbyMessage playerMsg)
	{
		if (Lobby?.Players.Any(x => x.Id == playerMsg.PlayerId) ?? true) 
		{
			Logger.LogInformation("Player already joined");
			return;
		}

		Lobby?.Players.Add(new LobbyPlayerMsg() 
		{ 
			LobbyId = playerMsg.LobbyId, 
			Id = playerMsg.PlayerId,
			Name = playerMsg.PlayerName,
			IsOwner = false, 
			IsReady = false 
		});	
	}

	private void OnPlayerLeft(string playerId)
	{
		var player = Lobby?.Players.FirstOrDefault(x => playerId == x.Id);

		if (player != null)
		{
			Lobby?.Players.Remove(player);
		}
	}

	private void SetPlayerIsReady(string playerId, bool isReady)
	{
		var player = Lobby?.Players.FirstOrDefault(x => playerId == x.Id);

		if (player != null)
		{
			player.IsReady = isReady;
		}
	}

	public void Dispose()
	{
		CreateLobbyService.Dispose();
	}
}
